---
interface Props {
  isOpen?: boolean;
  class?: string;
}

const { isOpen = false, class: className = "" } = Astro.props;

const navigationItems = [
  { href: "#about", label: "About", icon: "user" },
  { href: "#skills", label: "Skills", icon: "code" },
  { href: "#projects", label: "Projects", icon: "folder" },
  { href: "#pricing", label: "Pricing", icon: "dollar-sign" },
  { href: "#contact", label: "Contact", icon: "mail" },
];

const icons = {
  user: `<svg width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2M12 3a4 4 0 1 0 0 8 4 4 0 0 0 0-8z"/></svg>`,
  code: `<svg width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="m10 20 4-16m4 4 4 4-4 4M6 16l-4-4 4-4"/></svg>`,
  folder: `<svg width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"/></svg>`,
  "dollar-sign": `<svg width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 1v22M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>`,
  mail: `<svg width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/><path d="m22 6-10 7L2 6"/></svg>`,
};
---

<div
  class={`mobile-menu ${isOpen ? "open" : ""} ${className}`}
  id="mobile-menu"
>
  <nav class="mobile-menu__nav">
    {
      navigationItems.map((item) => (
        <a href={item.href} class="mobile-menu__link">
          <div class="accent-dot" />
          <span set:html={icons[item.icon as keyof typeof icons]} />
          {item.label}
        </a>
      ))
    }
  </nav>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const mobileMenu = document.getElementById("mobile-menu") as HTMLElement;
    const mobileMenuButton = document.querySelector(
      ".mobile-menu-button",
    ) as HTMLElement;
    const mobileMenuLinks = document.querySelectorAll(".mobile-menu__link");

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener("click", function () {
        mobileMenu.classList.toggle("open");
        mobileMenuButton.setAttribute(
          "aria-expanded",
          mobileMenu.classList.contains("open").toString(),
        );
      });

      // Close menu when clicking on links
      mobileMenuLinks.forEach((link) => {
        link.addEventListener("click", () => {
          setTimeout(() => {
            mobileMenu.classList.remove("open");
            mobileMenuButton.setAttribute("aria-expanded", "false");
          }, 150);
        });
      });

      // Close menu when clicking outside
      document.addEventListener("click", function (event) {
        if (
          !mobileMenuButton.contains(event.target as Node) &&
          !mobileMenu.contains(event.target as Node)
        ) {
          mobileMenu.classList.remove("open");
          mobileMenuButton.setAttribute("aria-expanded", "false");
        }
      });

      // Close menu on escape key
      document.addEventListener("keydown", function (event) {
        if (event.key === "Escape" && mobileMenu.classList.contains("open")) {
          mobileMenu.classList.remove("open");
          mobileMenuButton.setAttribute("aria-expanded", "false");
        }
      });
    }
  });
</script>
