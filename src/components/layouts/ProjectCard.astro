---
import Badge from "@/components/ui/Badge.astro";
import Button from "@/components/ui/Button.astro";
import { getLinkIcon } from "@/utils/icons";

interface Props {
  title: string;
  description: string;
  stack: string[];
  year: number;
  status?: string;
  links: Array<{
    name: string;
    url: string;
    type?: "repository" | "demo" | "documentation" | "api";
  }>;
  featured?: boolean;
}

const {
  title,
  description,
  stack,
  year,
  status = "development",
  links,
  featured = false,
} = Astro.props;

// Determine if we have many technologies (for styling)
const hasMany = stack.length > 7;
const shouldTruncate = stack.length > 10;

// Status styling helper
const getStatusClass = (status: string) => {
  const normalized = status.toLowerCase().replace(/\s+/g, "-");
  if (normalized.includes("development") || normalized.includes("progress")) {
    return "project-card__status-text--development";
  }
  if (normalized.includes("closed") || normalized.includes("archived")) {
    return "project-card__status-text--closed";
  }
  if (normalized.includes("active") || normalized.includes("completed")) {
    return "";
  }
  return "project-card__status-text--progress";
};

const statusClass = getStatusClass(status);
---

<article class={`project-card ${featured ? "project-card--featured" : ""}`}>
  <!-- Header with year and status indicator -->
  <header class="project-card__header">
    <Badge variant="primary" class="project-card__year">{year}</Badge>
    <div class="project-card__status accent-dot accent-dot--secondary"></div>
  </header>

  <!-- Main content area -->
  <div class="project-card__content">
    <h3 class="project-card__title">{title}</h3>
    <p class="project-card__description">{description}</p>

    <!-- Technology stack with adaptive layout -->
    <div
      class={`project-card__stack ${
        hasMany ? "project-card__stack--many" : ""
      } ${shouldTruncate ? "project-card__stack--overflow" : ""}`}
      data-remaining={shouldTruncate ? stack.length - 7 : ""}
    >
      {
        stack.map((tech, index) => (
          <Badge
            variant={index % 2 === 0 ? "primary" : "secondary"}
            class={shouldTruncate && index >= 7 ? "badge--hidden" : ""}
          >
            {tech}
          </Badge>
        ))
      }
    </div>
  </div>

  <!-- Footer with status and multiple links -->
  <footer class="project-card__footer">
    <span class={`project-card__status-text ${statusClass}`}>
      {status}
    </span>

    <div class="project-card__links">
      {
        links.map((link) => (
          <Button
            variant="secondary"
            size="sm"
            href={link.url}
            class="project-card__link"
            aria-label={`${link.name} for ${title} project - ${link.type === "repository" ? "View source code" : link.type === "demo" ? "View live demo" : link.type === "documentation" ? "View documentation" : "View link"}`}
          >
            <span set:html={getLinkIcon(link.type)} aria-hidden="true" />
            <span class="project-card__link-text">{link.name}</span>
          </Button>
        ))
      }
    </div>
  </footer>
</article>
