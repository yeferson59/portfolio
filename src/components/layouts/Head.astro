---
import { siteMetadata } from "@/data/site";

export interface Props {
  /**
   * Page title - will be formatted using titleTemplate if provided
   */
  title?: string;

  /**
   * Meta description for the page
   */
  description?: string;

  /**
   * Keywords specific to this page (will be merged with default keywords)
   */
  keywords?: string[];

  /**
   * Canonical URL for the page
   */
  canonical?: string;

  /**
   * Image for Open Graph and Twitter cards
   */
  image?: {
    url: string;
    alt: string;
    width?: number;
    height?: number;
  };

  /**
   * Page type for Open Graph (article, website, etc.)
   */
  type?: "website" | "article" | "profile";

  /**
   * Whether the page should be indexed by search engines
   */
  noindex?: boolean;

  /**
   * Whether search engines should follow links on this page
   */
  nofollow?: boolean;

  /**
   * Additional robots directives
   */
  robots?: {
    noarchive?: boolean;
    noimageindex?: boolean;
    nocache?: boolean;
  };

  /**
   * Author of the page content
   */
  author?: string;

  /**
   * Publication date (for articles)
   */
  publishedTime?: string;

  /**
   * Last modified date
   */
  modifiedTime?: string;

  /**
   * Section/category (for articles)
   */
  section?: string;

  /**
   * Tags (for articles)
   */
  tags?: string[];

  /**
   * Custom structured data (JSON-LD)
   */
  structuredData?: Record<string, any>;
}

const {
  title,
  description = siteMetadata.description,
  keywords = [],
  canonical,
  image,
  type = "website",
  noindex = false,
  nofollow = false,
  robots,
  author = siteMetadata.author,
  publishedTime,
  modifiedTime,
  section,
  tags = [],
  structuredData,
} = Astro.props;

// Format title using template
const pageTitle = title
  ? siteMetadata.titleTemplate.replace("%s", title)
  : siteMetadata.title;

// Merge keywords
const allKeywords = [...siteMetadata.keywords, ...keywords].join(", ");

// Build robots content
const robotsDirectives = [];
if (noindex || !siteMetadata.robots.index) robotsDirectives.push("noindex");
else robotsDirectives.push("index");

if (nofollow || !siteMetadata.robots.follow) robotsDirectives.push("nofollow");
else robotsDirectives.push("follow");

if (robots?.noarchive || !siteMetadata.robots.noarchive)
  robotsDirectives.push("noarchive");
if (robots?.noimageindex || !siteMetadata.robots.noimageindex)
  robotsDirectives.push("noimageindex");
if (robots?.nocache || !siteMetadata.robots.nocache)
  robotsDirectives.push("nocache");

const robotsContent = robotsDirectives.join(", ");

// Image for social sharing
const shareImage = image || siteMetadata.image;
const imageUrl = shareImage.url.startsWith("http")
  ? shareImage.url
  : `${siteMetadata.siteUrl}${shareImage.url}`;

// Canonical URL
const canonicalUrl = canonical || Astro.url.href;

// Default structured data for the site
const defaultStructuredData = {
  "@context": "https://schema.org",
  "@type": type === "article" ? "Article" : "WebSite",
  name: pageTitle,
  description,
  url: canonicalUrl,
  author: {
    "@type": "Person",
    name: author,
    email: siteMetadata.authorEmail,
  },
  publisher: {
    "@type": "Organization",
    name: siteMetadata.siteName,
    url: siteMetadata.siteUrl,
  },
  ...(publishedTime && { datePublished: publishedTime }),
  ...(modifiedTime && { dateModified: modifiedTime }),
  ...(section && { articleSection: section }),
  ...(tags.length > 0 && { keywords: tags.join(", ") }),
};

const finalStructuredData = structuredData || defaultStructuredData;
---

<!-- Basic Meta Tags -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="generator" content={Astro.generator} />

<!-- SEO Meta Tags -->
<title>{pageTitle}</title>
<meta name="description" content={description} />
<meta name="keywords" content={allKeywords} />
<meta name="author" content={author} />
<meta name="robots" content={robotsContent} />
<meta name="language" content={siteMetadata.language} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalUrl} />

<!-- Favicon and Icons -->
<link rel="icon" type="image/svg+xml" href={siteMetadata.favicon.icon} />
<link rel="apple-touch-icon" href={siteMetadata.favicon.appleTouchIcon} />
<link rel="manifest" href={siteMetadata.favicon.manifest} />

<!-- Open Graph Meta Tags -->
<meta property="og:type" content={type} />
<meta property="og:title" content={pageTitle} />
<meta property="og:description" content={description} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:site_name" content={siteMetadata.siteName} />
<meta property="og:locale" content={siteMetadata.locale} />
<meta property="og:image" content={imageUrl} />
<meta property="og:image:alt" content={shareImage.alt} />
{
  shareImage.width && (
    <meta property="og:image:width" content={shareImage.width.toString()} />
  )
}
{
  shareImage.height && (
    <meta property="og:image:height" content={shareImage.height.toString()} />
  )
}

<!-- Article-specific Open Graph Tags -->
{
  type === "article" && (
    <>
      {publishedTime && (
        <meta property="article:published_time" content={publishedTime} />
      )}
      {modifiedTime && (
        <meta property="article:modified_time" content={modifiedTime} />
      )}
      {author && <meta property="article:author" content={author} />}
      {section && <meta property="article:section" content={section} />}
      {tags.map((tag) => (
        <meta property="article:tag" content={tag} />
      ))}
    </>
  )
}

<!-- Twitter Card Meta Tags -->
<meta name="twitter:card" content="summary_large_image" />
{
  siteMetadata.twitterHandle && (
    <meta name="twitter:site" content={siteMetadata.twitterHandle} />
  )
}
{
  siteMetadata.twitterHandle && (
    <meta name="twitter:creator" content={siteMetadata.twitterHandle} />
  )
}
<meta name="twitter:title" content={pageTitle} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={imageUrl} />
<meta name="twitter:image:alt" content={shareImage.alt} />

<!-- Additional Meta Tags -->
{publishedTime && <meta name="date" content={publishedTime} />}
{modifiedTime && <meta name="last-modified" content={modifiedTime} />}

<!-- Structured Data (JSON-LD) -->
<script
  type="application/ld+json"
  is:inline
  set:html={JSON.stringify(finalStructuredData)}
/>

<!-- DNS Prefetch for Performance -->
<link rel="dns-prefetch" href="//fonts.googleapis.com" />
<link rel="dns-prefetch" href="//www.google-analytics.com" />
<link rel="dns-prefetch" href="//avatars.githubusercontent.com" />

<!-- Preload critical resources -->
<link rel="preload" href="/favicon.svg" as="image" type="image/svg+xml" />

<!-- Early hints for Core Web Vitals -->
<link rel="modulepreload" href="/_astro/client.js" />

<!-- Theme Color -->
<meta name="theme-color" content="#0f172a" />
<meta name="msapplication-TileColor" content="#0f172a" />
