---
/**
 * MCP Client Viewer Component
 * Interactive interface to display and interact with MCP client tools
 */
import SectionHeader from "@/components/layouts/SectionHeader.astro";
import Card from "@/components/ui/Card.astro";

type MCPTool = {
  name: string;
  description?: string;
  inputSchema?: {
    type?: string;
    properties?: Record<string, any>;
    required?: string[];
  };
};
---

<section id="mcp-viewer" class="gradient-overlay">
  <div class="container">
    <SectionHeader
      title="MCP Client Interactive Viewer"
      subtitle="Real-time interaction with Model Context Protocol tools and services"
    />

    <!-- MCP Connection Status -->
    <div class="mcp-status mb-xl">
      <Card variant="compact" class="status-card">
        <div class="status-content">
          <div class="status-indicator" id="mcp-connection-status">
            <div class="pulse-dot"></div>
            <span class="status-text">Connecting to MCP...</span>
          </div>
          <div class="status-details" id="mcp-status-details">
            <span class="detail-item">Tools: <strong id="tools-count">--</strong></span>
            <span class="detail-item">Response Time: <strong id="mcp-response-time">--</strong></span>
          </div>
        </div>
      </Card>
    </div>

    <!-- MCP Tools Grid -->
    <div class="mcp-tools-section mb-xl">
      <h3 class="section-subtitle mb-lg">Available MCP Tools</h3>
      <div id="mcp-tools-grid" class="tools-grid">
        <div class="loading-state">
          <div class="loading-spinner"></div>
          <p>Loading MCP tools...</p>
        </div>
      </div>
    </div>

    <!-- Interactive Tool Executor -->
    <div class="tool-executor-section">
      <Card>
        <h3 class="text-primary mb-lg text-2xl font-bold">Tool Executor</h3>
        <div class="executor-content">
          <div class="tool-selector mb-md">
            <label for="tool-select" class="selector-label">Select Tool</label>
            <select id="tool-select" class="tool-select" disabled>
              <option value="">Loading tools...</option>
            </select>
          </div>

          <div id="tool-params" class="tool-params mb-md" style="display: none;">
            <label class="params-label">Tool Parameters</label>
            <div id="params-container" class="params-container"></div>
          </div>

          <div class="executor-actions mb-md">
            <button type="button" id="execute-tool-btn" class="btn-execute" disabled>
              <span class="btn-icon">▶</span>
              Execute Tool
            </button>
            <button type="button" id="clear-result-btn" class="btn-clear">
              Clear Result
            </button>
          </div>

          <div id="tool-result" class="tool-result" style="display: none;">
            <div class="result-header">
              <h4 class="result-title">Execution Result</h4>
              <div class="result-metrics">
                <span class="metric-badge" id="result-duration">--ms</span>
                <span class="metric-badge" id="result-status">--</span>
              </div>
            </div>
            <div id="result-content" class="result-content"></div>
          </div>
        </div>
      </Card>
    </div>
  </div>
</section>

<style>
  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* MCP Status */
  .mcp-status {
    margin-bottom: var(--space-xl);
  }

  .status-card {
    background: linear-gradient(
      135deg,
      rgba(var(--color-primary-rgb), 0.1),
      rgba(var(--color-primary-rgb), 0.05)
    );
    border: 1px solid var(--color-primary);
  }

  .status-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--space-lg);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }

  .pulse-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: var(--color-primary);
    animation: pulse 2s infinite;
  }

  .pulse-dot.connected {
    background: #10b981;
  }

  .pulse-dot.error {
    background: #ef4444;
    animation: none;
  }

  .status-text {
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-medium);
    color: var(--color-text-primary);
  }

  .status-details {
    display: flex;
    gap: var(--space-lg);
  }

  .detail-item {
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
  }

  .detail-item strong {
    color: var(--color-primary);
    font-weight: var(--font-weight-semibold);
  }

  /* Section Subtitle */
  .section-subtitle {
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-bold);
    color: var(--color-text-primary);
  }

  /* Tools Grid */
  .tools-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--space-lg);
  }

  .loading-state,
  .error-state,
  .empty-state {
    grid-column: 1 / -1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--space-md);
    padding: var(--space-xl);
    text-align: center;
    color: var(--color-text-secondary);
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid rgba(var(--color-primary-rgb), 0.2);
    border-top-color: var(--color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .tool-card {
    padding: var(--space-lg);
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    transition: all var(--transition-fast);
    cursor: pointer;
  }

  .tool-card:hover {
    border-color: var(--color-primary);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  .tool-card.selected {
    border-color: var(--color-primary);
    background: rgba(var(--color-primary-rgb), 0.05);
  }

  .tool-name {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text-primary);
    margin-bottom: var(--space-xs);
  }

  .tool-description {
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
    line-height: 1.5;
    margin-bottom: var(--space-sm);
  }

  .tool-meta {
    display: flex;
    gap: var(--space-xs);
    flex-wrap: wrap;
  }

  .meta-badge {
    padding: 0.25rem 0.5rem;
    font-size: var(--font-size-xs);
    font-weight: var(--font-weight-medium);
    color: var(--color-text-secondary);
    background: var(--color-bg-tertiary);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-sm);
  }

  /* Tool Executor */
  .executor-content {
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
  }

  .tool-selector,
  .tool-params {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .selector-label,
  .params-label {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text-primary);
  }

  .tool-select {
    padding: var(--space-sm) var(--space-md);
    font-size: var(--font-size-base);
    color: var(--color-text-primary);
    background: var(--color-bg-tertiary);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: all var(--transition-fast);
  }

  .tool-select:hover:not(:disabled) {
    border-color: var(--color-primary);
  }

  .tool-select:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb), 0.1);
  }

  .tool-select:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .params-container {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .param-field {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .param-field label {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    color: var(--color-text-secondary);
  }

  .param-field label.required::after {
    content: " *";
    color: #ef4444;
  }

  .param-field input,
  .param-field textarea {
    padding: var(--space-sm) var(--space-md);
    font-size: var(--font-size-sm);
    color: var(--color-text-primary);
    background: var(--color-bg-tertiary);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-sm);
    font-family: "Monaco", "Menlo", monospace;
  }

  .param-field input:focus,
  .param-field textarea:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb), 0.1);
  }

  /* Executor Actions */
  .executor-actions {
    display: flex;
    gap: var(--space-sm);
  }

  .btn-execute,
  .btn-clear {
    padding: var(--space-sm) var(--space-lg);
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-semibold);
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: all var(--transition-fast);
  }

  .btn-execute {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-xs);
    color: white;
    background: var(--color-primary);
    border: none;
  }

  .btn-execute:hover:not(:disabled) {
    background: var(--color-primary-dark);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .btn-execute:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .btn-clear {
    color: var(--color-text-secondary);
    background: transparent;
    border: 1px solid var(--color-border);
  }

  .btn-clear:hover {
    color: var(--color-text-primary);
    background: var(--color-bg-hover);
  }

  .btn-icon {
    font-size: var(--font-size-lg);
  }

  /* Tool Result */
  .tool-result {
    margin-top: var(--space-md);
    padding: var(--space-lg);
    background: var(--color-bg-tertiary);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
  }

  .result-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-md);
    padding-bottom: var(--space-sm);
    border-bottom: 1px solid var(--color-border);
  }

  .result-title {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text-primary);
  }

  .result-metrics {
    display: flex;
    gap: var(--space-sm);
  }

  .metric-badge {
    padding: 0.25rem 0.5rem;
    font-size: var(--font-size-xs);
    font-weight: var(--font-weight-semibold);
    font-family: "Monaco", "Menlo", monospace;
    color: var(--color-primary);
    background: rgba(var(--color-primary-rgb), 0.1);
    border: 1px solid rgba(var(--color-primary-rgb), 0.3);
    border-radius: var(--radius-sm);
  }

  .metric-badge.success {
    color: #10b981;
    background: rgba(16, 185, 129, 0.1);
    border-color: rgba(16, 185, 129, 0.3);
  }

  .metric-badge.error {
    color: #ef4444;
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
  }

  .result-content {
    font-family: "Monaco", "Menlo", monospace;
    font-size: var(--font-size-sm);
    line-height: 1.6;
    color: var(--color-text-primary);
    background: var(--color-bg-secondary);
    padding: var(--space-md);
    border-radius: var(--radius-sm);
    border: 1px solid var(--color-border);
    overflow-x: auto;
    white-space: pre-wrap;
    word-break: break-word;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .container {
      padding: 0 1rem;
    }

    .status-content {
      flex-direction: column;
      align-items: flex-start;
    }

    .status-details {
      flex-direction: column;
      gap: var(--space-xs);
    }

    .tools-grid {
      grid-template-columns: 1fr;
    }

    .executor-actions {
      flex-direction: column;
    }

    .btn-execute {
      width: 100%;
    }
  }
</style>

<script>
  type MCPTool = {
    name: string;
    description?: string;
    inputSchema?: {
      type?: string;
      properties?: Record<string, any>;
      required?: string[];
    };
  };

  class MCPViewerController {
    private tools: MCPTool[] = [];
    private selectedTool: MCPTool | null = null;

    constructor() {
      this.initMCPClient();
    }

    private async initMCPClient() {
      const statusIndicator = document.getElementById("mcp-connection-status");
      const statusText = statusIndicator?.querySelector(".status-text");
      const pulseDot = statusIndicator?.querySelector(".pulse-dot");

      try {
        const startTime = Date.now();
        
        // Fetch tools from our API endpoint
        const response = await fetch("/api/mcps/finance/get_tools");
        
        if (!response.ok) {
          throw new Error(`Failed to fetch MCP tools: ${response.statusText}`);
        }

        const tools = await response.json();
        const duration = Date.now() - startTime;

        this.tools = Array.isArray(tools) ? tools : [];

        // Update status
        if (statusText) statusText.textContent = "Connected to Finance MCP";
        if (pulseDot) pulseDot.classList.add("connected");

        // Update details
        const toolsCountElem = document.getElementById("tools-count");
        if (toolsCountElem) toolsCountElem.textContent = String(this.tools.length);
        const responseTimeElem = document.getElementById("mcp-response-time");
        if (responseTimeElem) responseTimeElem.textContent = `${duration}ms`;

        // Render tools
        this.renderTools();
        this.populateToolSelect();
      } catch (error) {
        console.error("Failed to connect to MCP:", error);
        if (statusText) statusText.textContent = "Connection Failed";
        if (pulseDot) {
          pulseDot.classList.remove("connected");
          pulseDot.classList.add("error");
        }
        this.showError("Failed to load MCP tools. Please try again later.");
      }
    }

    private renderTools() {
      const grid = document.getElementById("mcp-tools-grid");
      if (!grid) return;

      if (this.tools.length === 0) {
        grid.innerHTML = `
          <div class="empty-state">
            <p>No MCP tools available</p>
          </div>
        `;
        return;
      }

      grid.innerHTML = this.tools
        .map(
          (tool, index) => `
          <div class="tool-card" data-tool-index="${index}">
            <h4 class="tool-name">${this.escapeHtml(tool.name)}</h4>
            <p class="tool-description">
              ${this.escapeHtml(tool.description || "No description available")}
            </p>
            <div class="tool-meta">
              ${
                tool.inputSchema?.required?.length
                  ? `<span class="meta-badge">${tool.inputSchema.required.length} required params</span>`
                  : `<span class="meta-badge">No required params</span>`
              }
              ${
                tool.inputSchema?.properties
                  ? `<span class="meta-badge">${Object.keys(tool.inputSchema.properties).length} total params</span>`
                  : ""
              }
            </div>
          </div>
        `,
        )
        .join("");

      // Add click handlers
      grid.querySelectorAll(".tool-card").forEach((card) => {
        card.addEventListener("click", (e) => {
          const index = parseInt((e.currentTarget as HTMLElement).dataset.toolIndex!);
          this.selectTool(index);
        });
      });
    }

    private populateToolSelect() {
      const select = document.getElementById("tool-select") as HTMLSelectElement;
      if (!select) return;

      select.innerHTML = '<option value="">Select a tool...</option>';
      this.tools.forEach((tool, index) => {
        const option = document.createElement("option");
        option.value = String(index);
        option.textContent = tool.name;
        select.appendChild(option);
      });

      select.disabled = false;

      select.addEventListener("change", (e) => {
        const index = parseInt((e.target as HTMLSelectElement).value);
        if (!isNaN(index)) {
          this.selectTool(index);
        }
      });

      // Execute button
      const executeBtn = document.getElementById("execute-tool-btn");
      executeBtn?.addEventListener("click", () => this.executeTool());

      // Clear button
      const clearBtn = document.getElementById("clear-result-btn");
      clearBtn?.addEventListener("click", () => this.clearResult());
    }

    private selectTool(index: number) {
      this.selectedTool = this.tools[index];

      // Update UI
      const select = document.getElementById("tool-select") as HTMLSelectElement;
      if (select) select.value = String(index);

      // Update tool cards
      document.querySelectorAll(".tool-card").forEach((card, i) => {
        if (i === index) {
          card.classList.add("selected");
        } else {
          card.classList.remove("selected");
        }
      });

      // Render parameters form
      this.renderParametersForm();

      // Enable execute button
      const executeBtn = document.getElementById("execute-tool-btn") as HTMLButtonElement;
      if (executeBtn) executeBtn.disabled = false;
    }

    private renderParametersForm() {
      const paramsSection = document.getElementById("tool-params");
      const paramsContainer = document.getElementById("params-container");

      if (!this.selectedTool || !paramsSection || !paramsContainer) return;

      const schema = this.selectedTool.inputSchema;

      if (!schema?.properties || Object.keys(schema.properties).length === 0) {
        paramsSection.style.display = "none";
        return;
      }

      paramsSection.style.display = "block";
      paramsContainer.innerHTML = "";

      Object.entries(schema.properties).forEach(([name, prop]: [string, any]) => {
        const isRequired = schema.required?.includes(name) || false;
        const field = document.createElement("div");
        field.className = "param-field";

        const label = document.createElement("label");
        label.textContent = name;
        label.htmlFor = `param-${name}`;
        if (isRequired) label.classList.add("required");

        let input: HTMLInputElement | HTMLTextAreaElement;

        if (prop.type === "object" || prop.type === "array") {
          input = document.createElement("textarea");
          input.rows = 3;
          input.placeholder = `Enter ${prop.type} (JSON format)`;
        } else {
          input = document.createElement("input");
          input.type = prop.type === "number" || prop.type === "integer" ? "number" : "text";
          input.placeholder = prop.description || `Enter ${name}`;
        }

        input.id = `param-${name}`;
        input.dataset.paramName = name;
        input.dataset.paramType = prop.type;
        input.required = isRequired;

        if (prop.default !== undefined) {
          input.value = String(prop.default);
        }

        field.appendChild(label);
        field.appendChild(input);
        paramsContainer.appendChild(field);
      });
    }

    private async executeTool() {
      if (!this.selectedTool) return;

      const executeBtn = document.getElementById("execute-tool-btn") as HTMLButtonElement;
      const resultDiv = document.getElementById("tool-result");
      const resultContent = document.getElementById("result-content");

      if (!executeBtn || !resultDiv || !resultContent) return;

      // Collect parameters
      const params: Record<string, any> = {};
      const paramInputs = document.querySelectorAll("[data-param-name]");

      try {
        paramInputs.forEach((input) => {
          const name = (input as HTMLElement).dataset.paramName!;
          const type = (input as HTMLElement).dataset.paramType!;
          const value = (input as HTMLInputElement).value.trim();

          if (value) {
            if (type === "object" || type === "array") {
              try {
                params[name] = JSON.parse(value);
              } catch {
                throw new Error(`Invalid JSON for parameter "${name}"`);
              }
            } else if (type === "number" || type === "integer") {
              params[name] = Number(value);
            } else if (type === "boolean") {
              params[name] = value === "true";
            } else {
              params[name] = value;
            }
          }
        });

        // Show loading state
        executeBtn.disabled = true;
        executeBtn.innerHTML = '<span class="btn-icon">⏳</span> Executing...';

        const startTime = Date.now();

        // Call the MCP tool through our API
        const response = await fetch(
          `/api/mcps/finance/execute?tool=${encodeURIComponent(this.selectedTool.name)}&params=${encodeURIComponent(JSON.stringify(params))}`,
        );

        const duration = Date.now() - startTime;
        const result = await response.json();

        // Update result display
        resultDiv.style.display = "block";
        document.getElementById("result-duration")!.textContent = `${duration}ms`;

        if (response.ok) {
          document.getElementById("result-status")!.textContent = "SUCCESS";
          document.getElementById("result-status")!.className = "metric-badge success";
          resultContent.textContent = JSON.stringify(result, null, 2);
        } else {
          throw new Error(result.error || "Execution failed");
        }
      } catch (error) {
        resultDiv.style.display = "block";
        document.getElementById("result-status")!.textContent = "ERROR";
        document.getElementById("result-status")!.className = "metric-badge error";
        document.getElementById("result-duration")!.textContent = "--";
        resultContent.textContent = error instanceof Error ? error.message : String(error);
      } finally {
        executeBtn.disabled = false;
        executeBtn.innerHTML = '<span class="btn-icon">▶</span> Execute Tool';
      }
    }

    private clearResult() {
      const resultDiv = document.getElementById("tool-result");
      if (resultDiv) resultDiv.style.display = "none";
    }

    private showError(message: string) {
      const grid = document.getElementById("mcp-tools-grid");
      if (grid) {
        grid.innerHTML = `
          <div class="error-state">
            <p style="color: #ef4444;">⚠️ ${this.escapeHtml(message)}</p>
          </div>
        `;
      }
    }

    private escapeHtml(text: string): string {
      const div = document.createElement("div");
      div.textContent = text;
      return div.innerHTML;
    }
  }

  // Initialize on DOM ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new MCPViewerController();
    });
  } else {
    new MCPViewerController();
  }
</script>
