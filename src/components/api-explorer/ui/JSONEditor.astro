---
/**
 * JSON Editor Component
 * Interactive JSON editor with syntax highlighting and validation
 */

interface Props {
  value?: string;
  placeholder?: string;
  label?: string;
  error?: string;
  rows?: number;
  readonly?: boolean;
  id?: string;
}

const {
  value = '',
  placeholder = '{\n  "key": "value"\n}',
  label,
  error,
  rows = 10,
  readonly = false,
  id = 'json-editor',
} = Astro.props;

// Format JSON if valid
let formattedValue = value;
try {
  if (value && value.trim()) {
    const parsed = JSON.parse(value);
    formattedValue = JSON.stringify(parsed, null, 2);
  }
} catch {
  formattedValue = value;
}
---

<div class="json-editor-container">
  {label && (
    <label for={id} class="json-editor-label">
      {label}
    </label>
  )}
  
  <div class="json-editor-wrapper" data-error={error ? 'true' : 'false'}>
    <textarea
      id={id}
      class="json-editor"
      rows={rows}
      placeholder={placeholder}
      readonly={readonly}
      data-json-editor
    >{formattedValue}</textarea>
    
    <div class="json-editor-toolbar">
      <button type="button" class="btn-format" data-format-json title="Format JSON">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
          <path d="M4 4h8v1H4V4zm0 3h8v1H4V7zm0 3h5v1H4v-1z"/>
        </svg>
        Format
      </button>
      
      <button type="button" class="btn-copy" data-copy-json title="Copy JSON">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
          <path d="M4 2h7v1H4V2zm0 3h7v1H4V5zm0 3h5v1H4V8z"/>
        </svg>
        Copy
      </button>
      
      <span class="json-status" data-json-status></span>
    </div>
  </div>
  
  {error && (
    <div class="json-editor-error" role="alert">
      {error}
    </div>
  )}
</div>

<style>
  .json-editor-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .json-editor-label {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text-primary);
  }

  .json-editor-wrapper {
    position: relative;
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    background: var(--color-bg-secondary);
    transition: border-color 0.2s;
  }

  .json-editor-wrapper:focus-within {
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb), 0.1);
  }

  .json-editor-wrapper[data-error="true"] {
    border-color: var(--color-error);
  }

  .json-editor {
    width: 100%;
    padding: 1rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875rem;
    line-height: 1.5;
    color: var(--color-text-primary);
    background: transparent;
    border: none;
    resize: vertical;
    outline: none;
  }

  .json-editor::placeholder {
    color: var(--color-text-tertiary);
  }

  .json-editor-toolbar {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-top: 1px solid var(--color-border);
    background: var(--color-bg-tertiary);
  }

  .btn-format,
  .btn-copy {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    background: transparent;
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .btn-format:hover,
  .btn-copy:hover {
    color: var(--color-primary);
    background: var(--color-bg-hover);
    border-color: var(--color-primary);
  }

  .json-status {
    margin-left: auto;
    font-size: 0.75rem;
    color: var(--color-text-tertiary);
  }

  .json-status.valid {
    color: var(--color-success);
  }

  .json-status.invalid {
    color: var(--color-error);
  }

  .json-editor-error {
    padding: 0.5rem;
    font-size: 0.875rem;
    color: var(--color-error);
    background: rgba(var(--color-error-rgb), 0.1);
    border-radius: 0.25rem;
  }
</style>

<script>
  // JSON Editor functionality
  class JSONEditorController {
    constructor(container: HTMLElement) {
      const editor = container.querySelector('[data-json-editor]') as HTMLTextAreaElement;
      const formatBtn = container.querySelector('[data-format-json]') as HTMLButtonElement;
      const copyBtn = container.querySelector('[data-copy-json]') as HTMLButtonElement;
      const status = container.querySelector('[data-json-status]') as HTMLSpanElement;

      if (!editor || !formatBtn || !copyBtn || !status) return;

      // Validate on input
      editor.addEventListener('input', () => {
        this.validateJSON(editor, status);
      });

      // Format button
      formatBtn.addEventListener('click', () => {
        this.formatJSON(editor, status);
      });

      // Copy button
      copyBtn.addEventListener('click', () => {
        this.copyJSON(editor, copyBtn);
      });

      // Initial validation
      this.validateJSON(editor, status);
    }

    validateJSON(editor: HTMLTextAreaElement, status: HTMLSpanElement) {
      const value = editor.value.trim();
      
      if (!value) {
        status.textContent = '';
        status.className = 'json-status';
        return;
      }

      try {
        JSON.parse(value);
        status.textContent = '✓ Valid JSON';
        status.className = 'json-status valid';
      } catch (error) {
        status.textContent = '✗ Invalid JSON';
        status.className = 'json-status invalid';
      }
    }

    formatJSON(editor: HTMLTextAreaElement, status: HTMLSpanElement) {
      const value = editor.value.trim();
      
      if (!value) return;

      try {
        const parsed = JSON.parse(value);
        editor.value = JSON.stringify(parsed, null, 2);
        status.textContent = '✓ Formatted';
        status.className = 'json-status valid';
      } catch (error) {
        status.textContent = '✗ Cannot format invalid JSON';
        status.className = 'json-status invalid';
      }
    }

    async copyJSON(editor: HTMLTextAreaElement, button: HTMLButtonElement) {
      try {
        await navigator.clipboard.writeText(editor.value);
        const originalText = button.innerHTML;
        button.innerHTML = '✓ Copied!';
        setTimeout(() => {
          button.innerHTML = originalText;
        }, 2000);
      } catch (error) {
        console.error('Failed to copy:', error);
      }
    }
  }

  // Initialize all JSON editors
  document.querySelectorAll('.json-editor-container').forEach((container) => {
    new JSONEditorController(container as HTMLElement);
  });
</script>
