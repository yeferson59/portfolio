---
/**
 * Code Block Component
 * Displays formatted code with syntax highlighting
 */

interface Props {
  code: string;
  language?: string;
  title?: string;
  showLineNumbers?: boolean;
  maxHeight?: string;
}

const {
  code,
  language = 'text',
  title,
  showLineNumbers = false,
  maxHeight = '400px',
} = Astro.props;

const lines = code.split('\n');
---

<div class="code-block">
  {title && (
    <div class="code-block-header">
      <span class="code-block-title">{title}</span>
      <span class="code-block-language">{language}</span>
      <button type="button" class="code-block-copy" data-copy-code>
        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
          <path d="M4 2h7v1H4V2zm0 3h7v1H4V5zm0 3h5v1H4V8z"/>
        </svg>
        Copy
      </button>
    </div>
  )}
  
  <div class="code-block-content" style={`max-height: ${maxHeight}`}>
    <pre class="code-pre" data-language={language}><code class="code-text" data-code={code}>{
      showLineNumbers
        ? lines.map((line, i) => `${String(i + 1).padStart(3, ' ')} | ${line}`).join('\n')
        : code
    }</code></pre>
  </div>
</div>

<style>
  .code-block {
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    background: var(--color-bg-secondary);
    overflow: hidden;
  }

  .code-block-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem 1rem;
    background: var(--color-bg-tertiary);
    border-bottom: 1px solid var(--color-border);
  }

  .code-block-title {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text-primary);
  }

  .code-block-language {
    padding: 0.125rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--color-primary);
    background: rgba(var(--color-primary-rgb), 0.1);
    border-radius: 0.25rem;
    text-transform: uppercase;
  }

  .code-block-copy {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    margin-left: auto;
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    background: transparent;
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .code-block-copy:hover {
    color: var(--color-primary);
    background: var(--color-bg-hover);
    border-color: var(--color-primary);
  }

  .code-block-content {
    overflow: auto;
  }

  .code-pre {
    margin: 0;
    padding: 1rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875rem;
    line-height: 1.5;
    color: var(--color-text-primary);
  }

  .code-text {
    display: block;
    white-space: pre;
    word-wrap: normal;
  }

  /* Syntax highlighting classes */
  .code-pre[data-language="json"] .code-text {
    color: var(--color-code-json);
  }

  .code-pre[data-language="javascript"] .code-text,
  .code-pre[data-language="typescript"] .code-text {
    color: var(--color-code-js);
  }

  .code-pre[data-language="python"] .code-text {
    color: var(--color-code-python);
  }

  .code-pre[data-language="curl"] .code-text,
  .code-pre[data-language="bash"] .code-text {
    color: var(--color-code-bash);
  }
</style>

<script>
  // Copy functionality
  document.querySelectorAll('[data-copy-code]').forEach((button) => {
    button.addEventListener('click', async () => {
      const codeBlock = button.closest('.code-block');
      const codeElement = codeBlock?.querySelector('[data-code]') as HTMLElement;
      
      if (!codeElement) return;

      const code = codeElement.dataset.code || codeElement.textContent || '';

      try {
        await navigator.clipboard.writeText(code);
        const originalHTML = button.innerHTML;
        button.innerHTML = 'âœ“ Copied!';
        setTimeout(() => {
          button.innerHTML = originalHTML;
        }, 2000);
      } catch (error) {
        console.error('Failed to copy code:', error);
      }
    });
  });
</script>
